# .cursorrules
> Version: 1.0.0 (Last updated: 2025-02-01)

## Cursor AI Rules for Keyp.fo Development

This file defines how Cursor AI should assist in generating and maintaining code across all `keyp.fo` subdomains. It ensures **consistent coding practices, architecture, and performance optimizations**.

## **General Guidelines**
- **Write TypeScript-first code**.
- **Follow Next.js best practices** (App Router, Server Components, optimized routing).
- **Use ShadCN UI** for consistent component styling.
- **Ensure mobile-friendly UI** with Tailwind CSS utility classes.
- **Use React hooks (`useState`, `useEffect`, `useContext`)** where appropriate.
- **Optimize Firestore reads** to minimize unnecessary queries.

## **Architecture Overview**

### **Frontend (Client-Side)**
- **Next.js 15.1.4**
  - App Router for routing.
  - Server Components for improved performance.
  - Client Components for interactive UI elements.
- **React 18.2.0**
  - Hooks (`useState`, `useEffect`, `useReducer`).
  - Context API for global state management.
- **TypeScript** for type safety.
- **Tailwind CSS & ShadCN UI** for styling.
  - Component variants with `cva`.
  - Consistent UI across all subdomains.

### **Backend (Firebase & API Services)**
- **Firestore Database**
  - Real-time updates.
  - NoSQL document structure.
  - Optimized queries with indexing.
- **Firebase Authentication**
  - Store owner authentication.
  - Admin dashboard access.
  - Protected routes.
- **Firebase Storage**
  - Store images and assets.
  - Optimized image delivery.
  - CDN integration.
- **Firebase Hosting**
  - Global CDN for fast deployment.
  - SSL certificates.
  - Server-side rendering capabilities.

### **API & Data Flow**
- **Centralized API (`api.keyp.fo`)** for:
  - Store and product data.
  - Authentication handling.
  - Real-time user interactions.
- **Data Flow:**
  1. Users input search terms (store names, products, categories).
  2. Firestore (or Algolia if enabled) returns search results.
  3. Store data managed in Firestore updates in real time.
  4. Integration with **Ynskilisti, GÃ¡vuhugskot, TilboÃ°, Innkeypslisti**.

## **Component Architecture**
- **Atomic Design Principles** for modular components.
- **Reusable UI components** stored in `@keyp/ui` NPM package.
- **Type-safe props** to prevent runtime errors.
- **Custom Hooks** for stateful logic reuse (`useSearch`, `useAuth`).
- **Integration Components** for external services (social sharing, analytics, email marketing).

## **Performance Considerations**
- **Search Optimization:**
  - **Firestore-first** approach to reduce costs.
  - **Algolia** only if high-traffic search is required.
- **Image Optimization:**
  - Use `next/image` for automatic optimization.
  - Compress and store images in Firebase Storage (WebP format at max 800px width/height).
- **Code Splitting & Lazy Loading:**
  - Only load components when needed (`next/dynamic`).
  - Optimize bundle size.
- **Aggressive Caching Strategies:**
  - Use Firebase Firestore caching (`stale-while-revalidate`).
  - Enable CDN caching for static assets.
- **PWA Capabilities:**
  - Ensure app works offline where applicable.
  - Optimize for fast mobile performance.

## **State Management**
- **Global State:**
  - Use React Context for authentication & shared data.
- **Local State:**
  - Manage UI state with `useState` or `useReducer`.
- **Search State:**
  - Initially managed via Firestore queries.
  - Expandable to Algolia if needed.
- **Real-time Updates:**
  - Use Firestore listeners to sync data changes instantly.

## **Security & Compliance**
- **Firestore Security Rules:**
  - Restrict access based on authentication roles.
  - Ensure store owners can only edit their own store data.
- **Environment Variables:**
  - Store API keys securely in `.env.local`.
- **Data Protection & GDPR Compliance:**
  - Provide users with data export & deletion options.
- **Prevent Spam & Abuse:**
  - Implement rate limiting.
  - Validate all user input.

## **Development Workflow & AI Coding Assistance**
1. **Use Cursor AI for AI-generated code** but follow these standards:
   - Review AI-generated code before committing.
   - Ensure consistency with TypeScript types.
   - Avoid duplicate or unnecessary components.
   - Use **ShadCN UI components** for UI consistency.
2. **Use GitHub for version control**:
   - **Each subdomain has its own Git repository** (e.g., `ynskilisti.git`, `gavuhugskot.git`).
   - Each repository follows a **standard branching structure**:
     - **Main branch:** Stable releases.
     - **Dev branch:** Active development.
     - **Feature branches:** New features or bug fixes.
3. **Deployment Process**:
   - Use **Vercel for frontend deployment**.
   - Firebase Hosting for backend services.
   - Automate deployments via **GitHub Actions**.

## **Final Notes**
This `.cursorrules` file ensures that **all subdomains remain modular, scalable, and cost-efficient** while keeping a **consistent development experience with Cursor AI**. We prioritize **Firestore-based search first**, with an **optional transition to Algolia** if needed.

Additionally, all services will use **a single Firebase Storage instance** to store images in a compressed format, ensuring **cost efficiency** while keeping performance high. Future scaling options include splitting storage if needed.

ðŸ“Œ **For API details, refer to the [API Guidelines for `api.keyp.fo`](#).**

---
ðŸš€ **For any changes, update this document in GitHub or Notion for reference.**

## Version History
- **1.0.0** (2025-02-01)
  - Initial documentation
  - Core architecture defined
  - Development standards established
  - API structure outlined

Future versions should follow [Semantic Versioning](https://semver.org/):
- MAJOR version for incompatible API changes
- MINOR version for backwards-compatible functionality
- PATCH version for backwards-compatible bug fixes