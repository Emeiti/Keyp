rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }
    
    function isStoreOwner(storeId) {
      return isAuthenticated() && 
        request.auth.token.role == 'store_owner' && 
        request.auth.token.storeId == storeId;
    }

    function isWishlistOwner(wishlistId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.userId == request.auth.uid;
    }

    // Store rules
    match /stores/{storeId} {
      allow read: if true;  // Public can read store info
      allow create: if isAdmin();
      allow update: if isAdmin() || isStoreOwner(storeId);
      allow delete: if isAdmin();

      // Products subcollection
      match /products/{productId} {
        allow read: if true;
        allow write: if isAdmin() || isStoreOwner(storeId);
      }
    }

    // Wishlist rules
    match /wishlists/{wishlistId} {
      // Allow reading if wishlist is public or user is owner
      allow read: if resource.data.isPublic == true || 
                 (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // Allow creation if user is authenticated
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      // Allow updates if user is the owner
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      
      // Allow deletion if user is the owner
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;

      // Bought items subcollection
      match /bought/{itemId} {
        // Anyone except owner can read/write bought status
        allow read, write: if isAuthenticated() && 
                          get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.userId != request.auth.uid;
      }

      // Items subcollection
      match /items/{itemId} {
        // Public can read if wishlist is public
        allow read: if get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.isPublic == true ||
                   (isAuthenticated() && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.userId == request.auth.uid);
        
        // Only owner can modify items
        allow write: if isAuthenticated() && 
                    get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.userId == request.auth.uid;
      }
    }

    // Gift Ideas rules
    match /giftIdeas/{giftIdeaId} {
      allow read: if true;
      allow create: if 
        isAuthenticated() && 
        exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
        (isAdmin() || isStoreOwner(request.resource.data.storeId));
      allow update: if 
        isAuthenticated() && 
        (isAdmin() || isStoreOwner(resource.data.storeId));
      allow delete: if 
        isAuthenticated() && 
        (isAdmin() || isStoreOwner(resource.data.storeId));
    }
  }
} 